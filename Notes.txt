Some of the main Topics to be covered:
    -> CSS Design System
        -> Utility classes and custom properties
    -> Flexbox and Grid
    -> Accessibility

Let's dive in
    -> We will create a general reset 
    -- makes use to reset most of the default css properties witch is not needed(index.css)
    -> Then start with some more generic utility classes
    -> Finally, we can dive into creating the design system itself

Utility classes
    -> Do one thing, and do it very well
    -> Often only have one declaration, but they can have multiple when required
    -> Allow things to be much more modular, and allow us to write a lot less in the long run

# Advantages of RGB and HSL
    -> If we store the RGB and HSL values in a custom property, 
    -> it makes it really easy to tweak the alpha value when needed. 


# Now we will be seeing Typography

We will be breaking things up
    -> We want to keep things doing one job
    -> Everything becomes more plug and play 
    -> Creating classes also enables us write more semantic HTML
    (Semantic analysis is the task of ensuring that the declarations and statements of a
    program are semantically correct, i.e, that their meaning is clear and consistent with
    the way in which control structures and data types are supposed to be used.)

# Flex Basis - This works similar to the max-width


# Finding the right Balance
    -> Utility Classes let us work quickly 
    -> But, when we have something like our numbered tiles that is always the same it 
       can be a good idea to find a right balance
    -> We will be creating a component for the Numbered titles


# We will be now adding spacing using utility class
    Utility are very common (.m-1, .m-2, etc), but we will don't need that in this design 
and we can use something else that will speed things up



# The explore button
    -> Very unique to the entire site
    -> No other "buttons"
    -> could we add some animations?



# Underlined indicator
->  These Two "components" have a lot in common
->  So to create underlined indicator we will be creating a special class for it


# Staring with the website 

We will be using the mobile centric approach and then building the web app 
We will focus on mobile first design as the complexity of the mobile design is less than the website 

# inline-grid can be used as normal grid makes the element act as block and takes as much space as available

# we also have to create font custom properties for the all the devices

# we wil be using em for media queries to avoid the weired bugs for safari browser

# ch in width is the dimension which speficies the max number of characters in a line



# Let's improve accessibility of the site
1. The most easy and important change is to add main tag for the main content of the page
2. Helping peoples with screen readers: When reading the menu we also read the number before the menu button
so we can add a property to the span tag i.e aria-hidden="true"
3. We will also be taking care of the people using keyboard navigation 
so we will be adding an id to the main content so that on pressing the tab we will be directed 
to the main content

# Using other image formats using picture tag we provide a default image in img and then provide image in source for fallback